#!/usr/bin/env node
(()=>{"use strict";var __webpack_modules__={534:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.TypeScritIndexWriter = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst CreateCommandModule_1 = __webpack_require__(211);\r\nconst EntrypointCommandModule_1 = __webpack_require__(283);\r\nconst configure_1 = __webpack_require__(323);\r\nconst CTIUtility_1 = __webpack_require__(571);\r\nclass TypeScritIndexWriter {\r\n    getDefaultOption(cwd) {\r\n        if ((0, CTIUtility_1.isNotEmpty)(cwd)) {\r\n            const option = (0, configure_1.getDeafultOptions)();\r\n            option.globOptions.cwd = cwd;\r\n            return option;\r\n        }\r\n        return (0, configure_1.getDeafultOptions)();\r\n    }\r\n    create(option, _cliCwd) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            const cliCwd = (() => {\r\n                if ((0, CTIUtility_1.isNotEmpty)(_cliCwd)) {\r\n                    return _cliCwd;\r\n                }\r\n                if ((0, CTIUtility_1.isNotEmpty)(option.globOptions.cwd)) {\r\n                    return option.globOptions.cwd;\r\n                }\r\n                return process.cwd();\r\n            })();\r\n            const createCommand = new CreateCommandModule_1.CreateCommandModule();\r\n            const result = yield createCommand.do(cliCwd, option);\r\n            return result;\r\n        });\r\n    }\r\n    createEntrypoint(option, _cliCwd) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            const cliCwd = (() => {\r\n                if ((0, CTIUtility_1.isNotEmpty)(_cliCwd)) {\r\n                    return _cliCwd;\r\n                }\r\n                if ((0, CTIUtility_1.isNotEmpty)(option.globOptions.cwd)) {\r\n                    return option.globOptions.cwd;\r\n                }\r\n                return process.cwd();\r\n            })();\r\n            const entrypointCommand = new EntrypointCommandModule_1.EntrypointCommandModule();\r\n            const result = yield entrypointCommand.do(cliCwd, option);\r\n            return result;\r\n        });\r\n    }\r\n}\r\nexports.TypeScritIndexWriter = TypeScritIndexWriter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx1REFBcUU7QUFDckUsMkRBQTZFO0FBQzdFLDZDQUF3RDtBQUV4RCw4Q0FBZ0Q7QUFFaEQsTUFBYSxvQkFBb0I7SUFDeEIsZ0JBQWdCLENBQUMsR0FBWTtRQUNsQyxJQUFJLDJCQUFVLEVBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkIsTUFBTSxNQUFNLEdBQUcsaUNBQWlCLEdBQUUsQ0FBQztZQUNuQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFFN0IsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELE9BQU8saUNBQWlCLEdBQUUsQ0FBQztJQUM3QixDQUFDO0lBRVksTUFBTSxDQUFDLE1BQTRCLEVBQUUsT0FBZ0I7O1lBQ2hFLE1BQU0sTUFBTSxHQUFXLENBQUMsR0FBRyxFQUFFO2dCQUMzQixJQUFJLDJCQUFVLEVBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3ZCLE9BQU8sT0FBTyxDQUFDO2lCQUNoQjtnQkFFRCxJQUFJLDJCQUFVLEVBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDdEMsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztpQkFDL0I7Z0JBRUQsT0FBTyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUVMLE1BQU0sYUFBYSxHQUFHLElBQUkseUNBQW1CLEVBQUUsQ0FBQztZQUNoRCxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQUVZLGdCQUFnQixDQUMzQixNQUE0QixFQUM1QixPQUFnQjs7WUFFaEIsTUFBTSxNQUFNLEdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQzNCLElBQUksMkJBQVUsRUFBQyxPQUFPLENBQUMsRUFBRTtvQkFDdkIsT0FBTyxPQUFPLENBQUM7aUJBQ2hCO2dCQUVELElBQUksMkJBQVUsRUFBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUN0QyxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO2lCQUMvQjtnQkFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QixDQUFDLENBQUMsRUFBRSxDQUFDO1lBRUwsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlEQUF1QixFQUFFLENBQUM7WUFDeEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzFELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtDQUNGO0FBbERELG9EQWtEQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NyZWF0ZS10cy1pbmRleC8uL3NyYy9UeXBlU2NyaXRJbmRleFdyaXRlci50cz9jYzFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZUNvbW1hbmRNb2R1bGUgfSBmcm9tICcuL2NvbW1hbmRzL0NyZWF0ZUNvbW1hbmRNb2R1bGUnO1xyXG5pbXBvcnQgeyBFbnRyeXBvaW50Q29tbWFuZE1vZHVsZSB9IGZyb20gJy4vY29tbWFuZHMvRW50cnlwb2ludENvbW1hbmRNb2R1bGUnO1xyXG5pbXBvcnQgeyBnZXREZWFmdWx0T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucy9jb25maWd1cmUnO1xyXG5pbXBvcnQgeyBJQ3JlYXRlVHNJbmRleE9wdGlvbiB9IGZyb20gJy4vb3B0aW9ucy9JQ3JlYXRlVHNJbmRleE9wdGlvbic7XHJcbmltcG9ydCB7IGlzTm90RW1wdHkgfSBmcm9tICcuL3Rvb2xzL0NUSVV0aWxpdHknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFR5cGVTY3JpdEluZGV4V3JpdGVyIHtcclxuICBwdWJsaWMgZ2V0RGVmYXVsdE9wdGlvbihjd2Q/OiBzdHJpbmcpOiBJQ3JlYXRlVHNJbmRleE9wdGlvbiB7XHJcbiAgICBpZiAoaXNOb3RFbXB0eShjd2QpKSB7XHJcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGdldERlYWZ1bHRPcHRpb25zKCk7XHJcbiAgICAgIG9wdGlvbi5nbG9iT3B0aW9ucy5jd2QgPSBjd2Q7XHJcblxyXG4gICAgICByZXR1cm4gb3B0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXREZWFmdWx0T3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGNyZWF0ZShvcHRpb246IElDcmVhdGVUc0luZGV4T3B0aW9uLCBfY2xpQ3dkPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBjbGlDd2Q6IHN0cmluZyA9ICgoKSA9PiB7XHJcbiAgICAgIGlmIChpc05vdEVtcHR5KF9jbGlDd2QpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9jbGlDd2Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc05vdEVtcHR5KG9wdGlvbi5nbG9iT3B0aW9ucy5jd2QpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbi5nbG9iT3B0aW9ucy5jd2Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwcm9jZXNzLmN3ZCgpO1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBjb25zdCBjcmVhdGVDb21tYW5kID0gbmV3IENyZWF0ZUNvbW1hbmRNb2R1bGUoKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZUNvbW1hbmQuZG8oY2xpQ3dkLCBvcHRpb24pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVFbnRyeXBvaW50KFxyXG4gICAgb3B0aW9uOiBJQ3JlYXRlVHNJbmRleE9wdGlvbixcclxuICAgIF9jbGlDd2Q/OiBzdHJpbmcsXHJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBjbGlDd2Q6IHN0cmluZyA9ICgoKSA9PiB7XHJcbiAgICAgIGlmIChpc05vdEVtcHR5KF9jbGlDd2QpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9jbGlDd2Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc05vdEVtcHR5KG9wdGlvbi5nbG9iT3B0aW9ucy5jd2QpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbi5nbG9iT3B0aW9ucy5jd2Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwcm9jZXNzLmN3ZCgpO1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBjb25zdCBlbnRyeXBvaW50Q29tbWFuZCA9IG5ldyBFbnRyeXBvaW50Q29tbWFuZE1vZHVsZSgpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZW50cnlwb2ludENvbW1hbmQuZG8oY2xpQ3dkLCBvcHRpb24pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///534\n')},674:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CleanCommandModule = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk_1 = (0, tslib_1.__importDefault)(__webpack_require__(22));\r\nconst TEI = (0, tslib_1.__importStar)(__webpack_require__(431));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst configure_1 = __webpack_require__(323);\r\nconst CTILogger_1 = __webpack_require__(38);\r\nconst CTIUtility_1 = __webpack_require__(571);\r\nconst CommandModule_1 = __webpack_require__(305);\r\nclass CleanCommandModule {\r\n    do(executePath, passed) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            const workDir = (0, CTIUtility_1.isNotEmpty)(passed.globOptions) && (0, CTIUtility_1.isNotEmpty)(passed.globOptions.cwd)\r\n                ? passed.globOptions.cwd\r\n                : process.cwd();\r\n            const configFromExecutePath = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(executePath));\r\n            const configFromWorkDir = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(workDir));\r\n            const option = (0, configure_1.concreteConfig)((0, configure_1.merging)((0, configure_1.merging)(TEI.isRight(configFromExecutePath)\r\n                ? configFromExecutePath.right\r\n                : (0, configure_1.getDeafultOptions)(), TEI.isRight(configFromWorkDir) ? configFromWorkDir.right : (0, configure_1.getDeafultOptions)()), passed));\r\n            const logger = new CTILogger_1.CTILogger(option.verbose);\r\n            logger.log(chalk_1.default.yellowBright('Option: '), option);\r\n            const indexFiles = yield CommandModule_1.CommandModule.promisify.glob('**/index.ts', {\r\n                cwd: workDir,\r\n                nonull: false,\r\n            });\r\n            const indexBackupFiles = yield CommandModule_1.CommandModule.promisify.glob('**/index.ts.bak', {\r\n                cwd: workDir,\r\n                nonull: false,\r\n            });\r\n            const entrypointFiles = yield CommandModule_1.CommandModule.promisify.glob('**/entrypoint.ts', {\r\n                cwd: workDir,\r\n                nonull: false,\r\n            });\r\n            const entrypointBackupFiles = yield CommandModule_1.CommandModule.promisify.glob('**/entrypoint.ts.bak', {\r\n                cwd: workDir,\r\n                nonull: false,\r\n            });\r\n            const outputFiles = yield CommandModule_1.CommandModule.promisify.glob(`**/${option.output}`, {\r\n                cwd: workDir,\r\n                nonull: false,\r\n            });\r\n            const outputBackupFiles = yield CommandModule_1.CommandModule.promisify.glob(`**/${option.output}.bak`, {\r\n                cwd: workDir,\r\n                nonull: false,\r\n            });\r\n            const concatted = indexFiles\r\n                .concat(indexBackupFiles)\r\n                .concat(entrypointFiles)\r\n                .concat(entrypointBackupFiles)\r\n                .concat(outputFiles)\r\n                .concat(outputBackupFiles);\r\n            const concattedSet = new Set(concatted);\r\n            if (concatted.length === 0) {\r\n                logger.flog(chalk_1.default.yellow(`Cannot find target file on working directory: ${workDir}`));\r\n            }\r\n            yield Promise.all(Array.from(concattedSet).map((file) => {\r\n                logger.log(chalk_1.default.redBright('delete file: '), path.join(workDir, file));\r\n                return fs.promises.unlink(path.join(workDir, file));\r\n            }));\r\n            logger.flog(chalk_1.default.green(`clean succeeded: ${workDir}`));\r\n        });\r\n    }\r\n    write(_param) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            throw new Error('Not Implemented');\r\n        });\r\n    }\r\n}\r\nexports.CleanCommandModule = CleanCommandModule;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///674\n")},305:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CommandModule = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk = (0, tslib_1.__importStar)(__webpack_require__(22));\r\nconst debug_1 = (0, tslib_1.__importDefault)(__webpack_require__(974));\r\nconst glob_1 = (0, tslib_1.__importDefault)(__webpack_require__(230));\r\nconst minimatch_1 = (0, tslib_1.__importDefault)(__webpack_require__(828));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst util = (0, tslib_1.__importStar)(__webpack_require__(837));\r\nconst log = (0, debug_1.default)('cti:CommandModule');\r\nclass CommandModule {\r\n    static targetFileFilter({ filenames, option, logger, }) {\r\n        const targetExts = option.targetExts.map((ext) => (ext.startsWith('.') ? ext : `.${ext}`));\r\n        try {\r\n            log('Start filter logic', option.fileExcludePatterns, filenames);\r\n            const filteredFiles = filenames\r\n                .filter((filename) => targetExts.indexOf(path.extname(filename)) >= 0)\r\n                .filter((filename) => {\r\n                return !option.excludes.reduce((result, exclude) => {\r\n                    return result || path.dirname(filename).indexOf(exclude) >= 0;\r\n                }, false);\r\n            })\r\n                .filter((filename) => !filename.endsWith('.d.ts'))\r\n                .filter((filename) => {\r\n                return !option.fileExcludePatterns.reduce((result, excludePattern) => {\r\n                    log('ExcludePattern: ', glob_1.default.hasMagic(excludePattern, option.globOptions), result || (0, minimatch_1.default)(filename, excludePattern));\r\n                    if (!glob_1.default.hasMagic(excludePattern, option.globOptions)) {\r\n                        return result || (0, minimatch_1.default)(filename, `*${excludePattern}*`);\r\n                    }\r\n                    return result || (0, minimatch_1.default)(filename, excludePattern);\r\n                }, false);\r\n            })\r\n                .filter((filename) => {\r\n                return !option.targetExts\r\n                    .map((ext) => `index.${ext}`)\r\n                    .reduce((result, indexFile) => {\r\n                    return result || filename.indexOf(indexFile) >= 0;\r\n                }, false);\r\n            })\r\n                .filter((filename) => {\r\n                return filename !== '.';\r\n            });\r\n            return filteredFiles;\r\n        }\r\n        catch (catched) {\r\n            const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n            log(err.message);\r\n            log(err.stack);\r\n            logger.error(chalk.default.redBright('Error occured: ', catched));\r\n            return [];\r\n        }\r\n    }\r\n}\r\nexports.CommandModule = CommandModule;\r\nCommandModule.promisify = {\r\n    glob: util.promisify(glob_1.default),\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFO2dCQUNuQixPQUFPLFFBQVEsS0FBSyxHQUFHLENBQUM7WUFDMUIsQ0FBQyxDQUFDLENBQUM7WUFFTCxPQUFPLGFBQWEsQ0FBQztTQUN0QjtRQUFDLE9BQU8sT0FBTyxFQUFFO1lBQ2hCLE1BQU0sR0FBRyxHQUFHLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUVuRixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pCLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFZixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFbEUsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7O0FBNUVILHNDQTZFQztBQTVFZSx1QkFBUyxHQUFHO0lBQ3hCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUF1QyxjQUFJLENBQUM7Q0FDakUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NyZWF0ZS10cy1pbmRleC8uL3NyYy9jb21tYW5kcy9Db21tYW5kTW9kdWxlLnRzPzBkNTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hhbGsgZnJvbSAnY2hhbGsnO1xyXG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBnbG9iIGZyb20gJ2dsb2InO1xyXG5pbXBvcnQgbWluaW1hdGNoIGZyb20gJ21pbmltYXRjaCc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XHJcbmltcG9ydCB7IElDcmVhdGVUc0luZGV4T3B0aW9uIH0gZnJvbSAnLi4vb3B0aW9ucy9JQ3JlYXRlVHNJbmRleE9wdGlvbic7XHJcbmltcG9ydCB7IENUSUxvZ2dlciB9IGZyb20gJy4uL3Rvb2xzL0NUSUxvZ2dlcic7XHJcblxyXG5jb25zdCBsb2cgPSBkZWJ1ZygnY3RpOkNvbW1hbmRNb2R1bGUnKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21tYW5kTW9kdWxlIHtcclxuICBwdWJsaWMgc3RhdGljIHByb21pc2lmeSA9IHtcclxuICAgIGdsb2I6IHV0aWwucHJvbWlzaWZ5PHN0cmluZywgZ2xvYi5JT3B0aW9ucywgQXJyYXk8c3RyaW5nPj4oZ2xvYiksXHJcbiAgfTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyB0YXJnZXRGaWxlRmlsdGVyKHtcclxuICAgIGZpbGVuYW1lcyxcclxuICAgIG9wdGlvbixcclxuICAgIGxvZ2dlcixcclxuICB9OiB7XHJcbiAgICBmaWxlbmFtZXM6IEFycmF5PHN0cmluZz47XHJcbiAgICBvcHRpb246IElDcmVhdGVUc0luZGV4T3B0aW9uO1xyXG4gICAgbG9nZ2VyOiBDVElMb2dnZXI7XHJcbiAgfSk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgY29uc3QgdGFyZ2V0RXh0cyA9IG9wdGlvbi50YXJnZXRFeHRzLm1hcCgoZXh0KSA9PiAoZXh0LnN0YXJ0c1dpdGgoJy4nKSA/IGV4dCA6IGAuJHtleHR9YCkpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGxvZygnU3RhcnQgZmlsdGVyIGxvZ2ljJywgb3B0aW9uLmZpbGVFeGNsdWRlUGF0dGVybnMsIGZpbGVuYW1lcyk7XHJcblxyXG4gICAgICBjb25zdCBmaWx0ZXJlZEZpbGVzID0gZmlsZW5hbWVzXHJcbiAgICAgICAgLy8gU3RlcCAxLCByZW1vdmUgZmlsZSBieSB0YXJnZXQgZXh0ZW5zaW9uXHJcbiAgICAgICAgLmZpbHRlcigoZmlsZW5hbWUpID0+IHRhcmdldEV4dHMuaW5kZXhPZihwYXRoLmV4dG5hbWUoZmlsZW5hbWUpKSA+PSAwKVxyXG5cclxuICAgICAgICAvLyBTdGVwIDIsIHJlbW92ZSBleGNsdWRlIGRpcmVjdG9yeVxyXG4gICAgICAgIC5maWx0ZXIoKGZpbGVuYW1lKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gIW9wdGlvbi5leGNsdWRlcy5yZWR1Y2U8Ym9vbGVhbj4oKHJlc3VsdCwgZXhjbHVkZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0IHx8IHBhdGguZGlybmFtZShmaWxlbmFtZSkuaW5kZXhPZihleGNsdWRlKSA+PSAwO1xyXG4gICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIFN0ZXAgMywgcmVtb3ZlIGRlY2xhcmUgZmlsZSgqLmQudHMpXHJcbiAgICAgICAgLmZpbHRlcigoZmlsZW5hbWUpID0+ICFmaWxlbmFtZS5lbmRzV2l0aCgnLmQudHMnKSlcclxuXHJcbiAgICAgICAgLy8gU3RlcCA0LCByZW1vdmUgZXhjbHVkZSBwYXR0ZXJuXHJcbiAgICAgICAgLmZpbHRlcigoZmlsZW5hbWUpID0+IHtcclxuICAgICAgICAgIHJldHVybiAhb3B0aW9uLmZpbGVFeGNsdWRlUGF0dGVybnMucmVkdWNlPGJvb2xlYW4+KChyZXN1bHQsIGV4Y2x1ZGVQYXR0ZXJuKSA9PiB7XHJcbiAgICAgICAgICAgIGxvZyhcclxuICAgICAgICAgICAgICAnRXhjbHVkZVBhdHRlcm46ICcsXHJcbiAgICAgICAgICAgICAgZ2xvYi5oYXNNYWdpYyhleGNsdWRlUGF0dGVybiwgb3B0aW9uLmdsb2JPcHRpb25zKSxcclxuICAgICAgICAgICAgICByZXN1bHQgfHwgbWluaW1hdGNoKGZpbGVuYW1lLCBleGNsdWRlUGF0dGVybiksXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWdsb2IuaGFzTWFnaWMoZXhjbHVkZVBhdHRlcm4sIG9wdGlvbi5nbG9iT3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBpbmRleE9mXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCBtaW5pbWF0Y2goZmlsZW5hbWUsIGAqJHtleGNsdWRlUGF0dGVybn0qYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgfHwgbWluaW1hdGNoKGZpbGVuYW1lLCBleGNsdWRlUGF0dGVybik7XHJcbiAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy8gU3RlcCA1LCByZW1vdmUgaW5kZXggZmlsZShpbmRleC50cywgaW5kZXgudHN4IGV0YyAuLi4pXHJcbiAgICAgICAgLmZpbHRlcigoZmlsZW5hbWUpID0+IHtcclxuICAgICAgICAgIHJldHVybiAhb3B0aW9uLnRhcmdldEV4dHNcclxuICAgICAgICAgICAgLm1hcCgoZXh0KSA9PiBgaW5kZXguJHtleHR9YClcclxuICAgICAgICAgICAgLnJlZHVjZTxib29sZWFuPigocmVzdWx0LCBpbmRleEZpbGUpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0IHx8IGZpbGVuYW1lLmluZGV4T2YoaW5kZXhGaWxlKSA+PSAwO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy8gU3RlcCA2LCByZW1vdmUgY3VycmVudCBkaXJlY3RvcnlcclxuICAgICAgICAuZmlsdGVyKChmaWxlbmFtZSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGZpbGVuYW1lICE9PSAnLic7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gZmlsdGVyZWRGaWxlcztcclxuICAgIH0gY2F0Y2ggKGNhdGNoZWQpIHtcclxuICAgICAgY29uc3QgZXJyID0gY2F0Y2hlZCBpbnN0YW5jZW9mIEVycm9yID8gY2F0Y2hlZCA6IG5ldyBFcnJvcigndW5rbm93biBlcnJvciByYWlzZWQnKTtcclxuXHJcbiAgICAgIGxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgIGxvZyhlcnIuc3RhY2spO1xyXG5cclxuICAgICAgbG9nZ2VyLmVycm9yKGNoYWxrLmRlZmF1bHQucmVkQnJpZ2h0KCdFcnJvciBvY2N1cmVkOiAnLCBjYXRjaGVkKSk7XHJcblxyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///305\n")},211:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CreateCommandModule = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk_1 = (0, tslib_1.__importDefault)(__webpack_require__(22));\r\nconst dayjs_1 = (0, tslib_1.__importDefault)(__webpack_require__(635));\r\nconst debug_1 = (0, tslib_1.__importDefault)(__webpack_require__(974));\r\nconst TEI = (0, tslib_1.__importStar)(__webpack_require__(431));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst configure_1 = __webpack_require__(323);\r\nconst CTILogger_1 = __webpack_require__(38);\r\nconst CTIUtility_1 = __webpack_require__(571);\r\nconst exportStatement_1 = __webpack_require__(418);\r\nconst CommandModule_1 = __webpack_require__(305);\r\nconst exists_1 = __webpack_require__(240);\r\nconst log = (0, debug_1.default)('cti:CreateCommandModule');\r\nclass CreateCommandModule {\r\n    do(executePath, passed) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            const workDir = (0, CTIUtility_1.isNotEmpty)(passed.globOptions) && (0, CTIUtility_1.isNotEmpty)(passed.globOptions.cwd)\r\n                ? passed.globOptions.cwd\r\n                : process.cwd();\r\n            const configFromExecutePath = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(executePath));\r\n            const configFromWorkDir = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(workDir));\r\n            const option = (0, configure_1.concreteConfig)((0, configure_1.merging)((0, configure_1.merging)(TEI.isRight(configFromExecutePath)\r\n                ? configFromExecutePath.right\r\n                : (0, configure_1.getDeafultOptions)(), TEI.isRight(configFromWorkDir) ? configFromWorkDir.right : (0, configure_1.getDeafultOptions)()), passed));\r\n            const logger = new CTILogger_1.CTILogger(option.verbose);\r\n            try {\r\n                logger.log(chalk_1.default.yellowBright('Option: '), option);\r\n                log('opt: ', option);\r\n                const targetFileGlob = option.targetExts.map((ext) => `*.${ext}`).join('|');\r\n                const allTsFiles = yield CommandModule_1.CommandModule.promisify.glob(`**/+(${targetFileGlob})`, option.globOptions);\r\n                const tsFiles = CommandModule_1.CommandModule.targetFileFilter({\r\n                    logger,\r\n                    option,\r\n                    filenames: allTsFiles,\r\n                });\r\n                const dupLibDirs = tsFiles\r\n                    .filter((tsFile) => tsFile.split('/').length > 1)\r\n                    .map((tsFile) => {\r\n                    const splitted = tsFile.split('/');\r\n                    const allPath = Array(splitted.length - 1)\r\n                        .fill(0)\r\n                        .map((_, index) => index + 1)\r\n                        .map((index) => {\r\n                        const a = splitted.slice(0, index).join('/');\r\n                        return a;\r\n                    });\r\n                    return allPath;\r\n                })\r\n                    .reduce((aggregated, libPath) => {\r\n                    return aggregated.concat(libPath);\r\n                }, []);\r\n                const dirSet = new Set();\r\n                dupLibDirs.forEach((dir) => dirSet.add(dir));\r\n                tsFiles.map((tsFile) => path.dirname(tsFile)).forEach((dir) => dirSet.add(dir));\r\n                const tsDirs = Array.from(dirSet);\r\n                if (option.includeCWD &&\r\n                    tsDirs.findIndex((dir) => path.resolve(dir) === path.resolve('.')) < 0) {\r\n                    tsDirs.push('.');\r\n                }\r\n                tsDirs.sort((left, right) => {\r\n                    const llen = left.split('/').length;\r\n                    const rlen = right.split('/').length;\r\n                    if (llen > rlen) {\r\n                        return -1;\r\n                    }\r\n                    if (llen < rlen) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                log('tsDirs:: ', tsDirs);\r\n                yield Promise.all(tsDirs.map((tsDir) => this.write({ option, logger, directory: tsDir, directories: tsDirs })));\r\n                logger.flog(chalk_1.default.green(`create succeeded: ${option.globOptions.cwd}`));\r\n            }\r\n            catch (catched) {\r\n                const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n                log(err.message);\r\n                log(err.stack);\r\n                logger.ferror(chalk_1.default.red(err.message));\r\n            }\r\n        });\r\n    }\r\n    write({ directory, option, logger, }) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            try {\r\n                logger.log(chalk_1.default.yellowBright('Current working directory: ', directory));\r\n                const resolvePath = path.resolve(option.globOptions.cwd || __dirname);\r\n                const elements = yield fs.promises.readdir(path.join(resolvePath, directory));\r\n                const stats = yield Promise.all(elements.map((target) => fs.promises.stat(path.join(resolvePath, directory, target))));\r\n                const statMap = elements.reduce((map, element, index) => {\r\n                    map[element] = stats[index];\r\n                    return map;\r\n                }, {});\r\n                const targets = elements\r\n                    .filter((element) => statMap[element].isDirectory() || element !== 'index.ts')\r\n                    .filter((element) => statMap[element].isDirectory() || element !== 'entrypoint.ts')\r\n                    .filter((element) => statMap[element].isDirectory() || element !== option.output);\r\n                const categorized = targets.reduce((result, target) => {\r\n                    if (statMap[target].isDirectory()) {\r\n                        result.dir.push(target);\r\n                    }\r\n                    else {\r\n                        result.allFiles.push(target);\r\n                    }\r\n                    return result;\r\n                }, { dir: [], allFiles: [] });\r\n                const excludePatternFilteredDirs = categorized.dir.filter((element) => {\r\n                    return !option.excludes.reduce((result, excludePattern) => {\r\n                        return result || element.indexOf(excludePattern) >= 0;\r\n                    }, false);\r\n                });\r\n                excludePatternFilteredDirs.sort();\r\n                categorized.allFiles = CommandModule_1.CommandModule.targetFileFilter({\r\n                    logger,\r\n                    option,\r\n                    filenames: categorized.allFiles,\r\n                });\r\n                const excludePatternFilteredFiles = [...categorized.allFiles].sort();\r\n                const sorted = (() => {\r\n                    if (option.fileFirst) {\r\n                        return categorized.allFiles.concat(excludePatternFilteredDirs);\r\n                    }\r\n                    return excludePatternFilteredDirs.concat(excludePatternFilteredFiles);\r\n                })();\r\n                const getExport = (0, exportStatement_1.getExportStatementCreator)(option, logger);\r\n                const exportString = sorted.map((target) => getExport(target));\r\n                const _buildComment = () => {\r\n                    if (option.withoutComment) {\r\n                        return '';\r\n                    }\r\n                    if (option.useTimestamp) {\r\n                        return `// created from ${option.quote}create-ts-index${option.quote} ${(0, dayjs_1.default)().format('YYYY-MM-DD HH:mm')}\\n\\n`;\r\n                    }\r\n                    return `// created from ${option.quote}create-ts-index${option.quote}\\n\\n`;\r\n                };\r\n                const comment = _buildComment();\r\n                const fileContent = comment + (0, CTIUtility_1.addNewline)(option, exportString.join('\\n'));\r\n                logger.log(chalk_1.default.green('created: '), `${path.join(resolvePath, directory, option.output)}`);\r\n                if (option.withoutBackupFile) {\r\n                    yield fs.promises.writeFile(path.join(resolvePath, directory, option.output), fileContent, 'utf8');\r\n                    return;\r\n                }\r\n                const indexFile = path.join(resolvePath, directory, option.output);\r\n                const indexBackupFile = path.join(resolvePath, directory, `${option.output}.bak`);\r\n                if (yield (0, exists_1.exists)(indexFile)) {\r\n                    logger.log(chalk_1.default.green('created: '), `${indexBackupFile}`);\r\n                    yield fs.promises.writeFile(indexBackupFile, yield fs.promises.readFile(indexFile), 'utf8');\r\n                }\r\n                yield fs.promises.writeFile(indexFile, fileContent, 'utf8');\r\n            }\r\n            catch (catched) {\r\n                const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n                log(err.message);\r\n                log(err.stack);\r\n                logger.error(chalk_1.default.red('indexWriter: ', err.message));\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.CreateCommandModule = CreateCommandModule;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///211\n")},283:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EntrypointCommandModule = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk_1 = (0, tslib_1.__importDefault)(__webpack_require__(22));\r\nconst dayjs_1 = (0, tslib_1.__importDefault)(__webpack_require__(635));\r\nconst debug_1 = (0, tslib_1.__importDefault)(__webpack_require__(974));\r\nconst TEI = (0, tslib_1.__importStar)(__webpack_require__(431));\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst configure_1 = __webpack_require__(323);\r\nconst CTILogger_1 = __webpack_require__(38);\r\nconst CTIUtility_1 = __webpack_require__(571);\r\nconst exists_1 = __webpack_require__(240);\r\nconst exportStatement_1 = __webpack_require__(418);\r\nconst CommandModule_1 = __webpack_require__(305);\r\nconst log = (0, debug_1.default)('cti:EntrypointCommandModule');\r\nclass EntrypointCommandModule {\r\n    do(executePath, passed) {\r\n        var _a;\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            const workDir = (0, CTIUtility_1.isNotEmpty)(passed.globOptions) && (0, CTIUtility_1.isNotEmpty)(passed.globOptions.cwd)\r\n                ? passed.globOptions.cwd\r\n                : process.cwd();\r\n            const configFromExecutePath = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(executePath));\r\n            const configFromWorkDir = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(workDir));\r\n            passed.output = (_a = passed.output) !== null && _a !== void 0 ? _a : 'entrypoint.ts';\r\n            const option = (0, configure_1.concreteConfig)((0, configure_1.merging)((0, configure_1.merging)(TEI.isRight(configFromExecutePath) ? configFromExecutePath.right : {}, TEI.isRight(configFromWorkDir) ? configFromWorkDir.right : {}), passed));\r\n            const logger = new CTILogger_1.CTILogger(option.verbose);\r\n            try {\r\n                logger.log(chalk_1.default.yellowBright('Option: '), option);\r\n                const targetFileGlob = option.targetExts.map((ext) => `*.${ext}`).join('|');\r\n                const allTsFiles = yield CommandModule_1.CommandModule.promisify.glob(`**/+(${targetFileGlob})`, option.globOptions);\r\n                const tsFiles = CommandModule_1.CommandModule.targetFileFilter({\r\n                    logger,\r\n                    option,\r\n                    filenames: allTsFiles,\r\n                });\r\n                const dupLibDirs = tsFiles\r\n                    .filter((tsFile) => tsFile.split('/').length > 1)\r\n                    .map((tsFile) => {\r\n                    const splitted = tsFile.split('/');\r\n                    const allPath = Array(splitted.length - 1)\r\n                        .fill(0)\r\n                        .map((_, index) => index + 1)\r\n                        .map((index) => {\r\n                        const a = splitted.slice(0, index).join('/');\r\n                        return a;\r\n                    });\r\n                    return allPath;\r\n                })\r\n                    .reduce((aggregated, libPath) => {\r\n                    return aggregated.concat(libPath);\r\n                }, []);\r\n                const dirSet = new Set();\r\n                dupLibDirs.forEach((dir) => dirSet.add(dir));\r\n                tsFiles.map((tsFile) => path.dirname(tsFile)).forEach((dir) => dirSet.add(dir));\r\n                const tsDirs = Array.from(dirSet);\r\n                if (option.includeCWD &&\r\n                    tsDirs.findIndex((dir) => path.resolve(dir) === path.resolve('.')) < 0) {\r\n                    tsDirs.push('.');\r\n                }\r\n                tsDirs.sort((left, right) => {\r\n                    const llen = left.split('/').length;\r\n                    const rlen = right.split('/').length;\r\n                    if (llen > rlen) {\r\n                        return -1;\r\n                    }\r\n                    if (llen < rlen) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                yield this.write({ logger, option, directories: tsDirs });\r\n                logger.flog(chalk_1.default.green(`entrypoint create succeeded: ${option.globOptions.cwd}`));\r\n            }\r\n            catch (catched) {\r\n                const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n                log('entrypoint: ', err.message);\r\n                log('entrypoint: ', err.stack);\r\n                logger.ferror(chalk_1.default.redBright(err));\r\n            }\r\n        });\r\n    }\r\n    write({ directories, option, logger, }) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            try {\r\n                const zipFiles = yield Promise.all(directories.map((directory) => {\r\n                    return (() => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n                        const resolvePath = path.resolve(option.globOptions.cwd || __dirname);\r\n                        const elements = yield fs.promises.readdir(path.join(resolvePath, directory));\r\n                        const stats = yield Promise.all(elements.map((target) => fs.promises.stat(path.join(resolvePath, directory, target))));\r\n                        const statMap = elements.reduce((map, element, index) => {\r\n                            map[element] = stats[index];\r\n                            return map;\r\n                        }, {});\r\n                        const targets = elements\r\n                            .filter((element) => statMap[element].isDirectory() || element !== 'index.ts')\r\n                            .filter((element) => statMap[element].isDirectory() || element !== 'entrypoint.ts')\r\n                            .filter((element) => statMap[element].isDirectory() || element !== option.output);\r\n                        const categorized = targets.reduce((result, target) => {\r\n                            if (statMap[target].isDirectory()) {\r\n                                result.dir.push(target);\r\n                            }\r\n                            else {\r\n                                result.allFiles.push(target);\r\n                            }\r\n                            return result;\r\n                        }, { dir: [], allFiles: [] });\r\n                        const excludePatternFilteredDirs = categorized.dir.filter((element) => {\r\n                            return !option.excludes.reduce((result, excludePattern) => {\r\n                                return result || element.indexOf(excludePattern) >= 0;\r\n                            }, false);\r\n                        });\r\n                        excludePatternFilteredDirs.sort();\r\n                        categorized.allFiles = CommandModule_1.CommandModule.targetFileFilter({\r\n                            logger,\r\n                            option,\r\n                            filenames: categorized.allFiles,\r\n                        });\r\n                        const excludePatternFilteredFiles = [...categorized.allFiles].sort();\r\n                        return excludePatternFilteredFiles.map((file) => path.relative(resolvePath, path.join(resolvePath, directory, file)));\r\n                    }))();\r\n                }));\r\n                const files = zipFiles.reduce((aggregated, _files) => {\r\n                    return aggregated.concat(_files);\r\n                });\r\n                const getExport = (0, exportStatement_1.getExportStatementCreator)(option, logger);\r\n                const exportString = files.map((target) => getExport(target));\r\n                const _buildComment = () => {\r\n                    if (option.withoutComment) {\r\n                        return '';\r\n                    }\r\n                    if (option.useTimestamp) {\r\n                        return `// created from ${option.quote}create-ts-index${option.quote} ${(0, dayjs_1.default)().format('YYYY-MM-DD HH:mm')}\\n\\n`;\r\n                    }\r\n                    return `// created from ${option.quote}create-ts-index${option.quote}\\n\\n`;\r\n                };\r\n                const comment = _buildComment();\r\n                const sortedExportString = exportString.sort();\r\n                const fileContent = comment + (0, CTIUtility_1.addNewline)(option, sortedExportString.join('\\n'));\r\n                const cwdPath = option.globOptions.cwd || __dirname;\r\n                logger.log(chalk_1.default.green('entrypoiny writed:', `${cwdPath}${path.sep}${option.output}`));\r\n                const entrypointFile = path.join(cwdPath, option.output);\r\n                const entrypointBackupFile = path.join(cwdPath, `${option.output}.bak`);\r\n                if (option.withoutBackupFile) {\r\n                    yield fs.promises.writeFile(entrypointFile, fileContent, 'utf8');\r\n                    return;\r\n                }\r\n                if (yield (0, exists_1.exists)(entrypointFile)) {\r\n                    logger.log(chalk_1.default.green('created: '), `${entrypointBackupFile}`);\r\n                    yield fs.promises.writeFile(entrypointBackupFile, yield fs.promises.readFile(entrypointFile), 'utf8');\r\n                }\r\n                yield fs.promises.writeFile(entrypointFile, fileContent, 'utf8');\r\n            }\r\n            catch (catched) {\r\n                const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n                logger.error(chalk_1.default.red('indexWriter: ', err.message));\r\n                logger.error(chalk_1.default.red('indexWriter: ', err.stack));\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.EntrypointCommandModule = EntrypointCommandModule;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///283\n")},101:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InitCommandModule = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk_1 = (0, tslib_1.__importDefault)(__webpack_require__(22));\r\nconst dayjs_1 = (0, tslib_1.__importDefault)(__webpack_require__(635));\r\nconst debug_1 = (0, tslib_1.__importDefault)(__webpack_require__(974));\r\nconst TEI = (0, tslib_1.__importStar)(__webpack_require__(431));\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst json5_1 = (0, tslib_1.__importDefault)(__webpack_require__(959));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst configure_1 = __webpack_require__(323);\r\nconst CTILogger_1 = __webpack_require__(38);\r\nconst CTIUtility_1 = __webpack_require__(571);\r\nconst log = (0, debug_1.default)('cti:InitCommandModule');\r\nclass InitCommandModule {\r\n    do(executePath, passed) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            const workDir = (0, CTIUtility_1.isNotEmpty)(passed.globOptions) && (0, CTIUtility_1.isNotEmpty)(passed.globOptions.cwd)\r\n                ? passed.globOptions.cwd\r\n                : process.cwd();\r\n            const configFromExecutePath = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(executePath));\r\n            const configFromWorkDir = yield (0, configure_1.readConfigRC)((0, configure_1.getRCFilename)(workDir));\r\n            const option = (0, configure_1.concreteConfig)((0, configure_1.merging)((0, configure_1.merging)(TEI.isRight(configFromExecutePath)\r\n                ? configFromExecutePath.right\r\n                : (0, configure_1.getDeafultOptions)(), TEI.isRight(configFromWorkDir) ? configFromWorkDir.right : (0, configure_1.getDeafultOptions)()), passed));\r\n            log('readed option: ', option);\r\n            const logger = new CTILogger_1.CTILogger(option.verbose);\r\n            try {\r\n                const defaultOption = (0, configure_1.getDeafultOptions)();\r\n                const stringified = json5_1.default.stringify(defaultOption, null, 2);\r\n                const headContent = (() => {\r\n                    if (option.useTimestamp) {\r\n                        return `// created from ${option.quote}create-ts-index${option.quote} ${(0, dayjs_1.default)().format('YYYY-MM-DD HH:mm')}`;\r\n                    }\r\n                    return `// created from ${option.quote}create-ts-index${option.quote}`;\r\n                })();\r\n                const addNewline = (() => {\r\n                    if (option.addNewline) {\r\n                        return '\\n';\r\n                    }\r\n                    return '';\r\n                })();\r\n                yield new Promise((resolve, reject) => {\r\n                    fs.writeFile(path.join(workDir, '.ctirc'), `${headContent}\\n\\n${stringified}${addNewline}`, (err) => {\r\n                        if ((0, CTIUtility_1.isNotEmpty)(err)) {\r\n                            return reject(err);\r\n                        }\r\n                        logger.flog(chalk_1.default.green(`.ctirc create succeeded: ${option.globOptions.cwd}`));\r\n                        return resolve();\r\n                    });\r\n                });\r\n            }\r\n            catch (catched) {\r\n                const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n                logger.error(chalk_1.default.red('indexWriter: ', err.message));\r\n                logger.error(chalk_1.default.red('indexWriter: ', err.stack));\r\n            }\r\n        });\r\n    }\r\n    write(_args) {\r\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n            throw new Error('Not implements');\r\n        });\r\n    }\r\n}\r\nexports.InitCommandModule = InitCommandModule;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBSyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQy9FLE9BQU8sT0FBTyxFQUFFLENBQUM7b0JBQ25CLENBQUMsQ0FDRixDQUFDO2dCQUNKLENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFBQyxPQUFPLE9BQU8sRUFBRTtnQkFDaEIsTUFBTSxHQUFHLEdBQUcsT0FBTyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2dCQUVuRixNQUFNLENBQUMsS0FBSyxDQUFDLGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ3JEO1FBQ0gsQ0FBQztLQUFBO0lBRVksS0FBSyxDQUFDLEtBSWxCOztZQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNwQyxDQUFDO0tBQUE7Q0FDRjtBQTdFRCw4Q0E2RUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtdHMtaW5kZXgvLi9zcmMvY29tbWFuZHMvSW5pdENvbW1hbmRNb2R1bGUudHM/OTQ3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xyXG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xyXG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xyXG5pbXBvcnQgKiBhcyBURUkgZnJvbSAnZnAtdHMvRWl0aGVyJztcclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQganNvbjUgZnJvbSAnanNvbjUnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQge1xyXG4gIGNvbmNyZXRlQ29uZmlnLFxyXG4gIGdldERlYWZ1bHRPcHRpb25zLFxyXG4gIGdldFJDRmlsZW5hbWUsXHJcbiAgbWVyZ2luZyxcclxuICByZWFkQ29uZmlnUkMsXHJcbn0gZnJvbSAnLi4vb3B0aW9ucy9jb25maWd1cmUnO1xyXG5pbXBvcnQgeyBJQ3JlYXRlVHNJbmRleE9wdGlvbiB9IGZyb20gJy4uL29wdGlvbnMvSUNyZWF0ZVRzSW5kZXhPcHRpb24nO1xyXG5pbXBvcnQgeyBDVElMb2dnZXIgfSBmcm9tICcuLi90b29scy9DVElMb2dnZXInO1xyXG5pbXBvcnQgeyBpc05vdEVtcHR5IH0gZnJvbSAnLi4vdG9vbHMvQ1RJVXRpbGl0eSc7XHJcbmltcG9ydCB7IElDb21tYW5kTW9kdWxlIH0gZnJvbSAnLi9JQ29tbWFuZE1vZHVsZSc7XHJcblxyXG5jb25zdCBsb2cgPSBkZWJ1ZygnY3RpOkluaXRDb21tYW5kTW9kdWxlJyk7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5pdENvbW1hbmRNb2R1bGUgaW1wbGVtZW50cyBJQ29tbWFuZE1vZHVsZSB7XHJcbiAgcHVibGljIGFzeW5jIGRvKGV4ZWN1dGVQYXRoOiBzdHJpbmcsIHBhc3NlZDogUGFydGlhbDxJQ3JlYXRlVHNJbmRleE9wdGlvbj4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IHdvcmtEaXIgPVxyXG4gICAgICBpc05vdEVtcHR5KHBhc3NlZC5nbG9iT3B0aW9ucykgJiYgaXNOb3RFbXB0eShwYXNzZWQuZ2xvYk9wdGlvbnMuY3dkKVxyXG4gICAgICAgID8gcGFzc2VkLmdsb2JPcHRpb25zLmN3ZFxyXG4gICAgICAgIDogcHJvY2Vzcy5jd2QoKTtcclxuXHJcbiAgICBjb25zdCBjb25maWdGcm9tRXhlY3V0ZVBhdGggPSBhd2FpdCByZWFkQ29uZmlnUkMoZ2V0UkNGaWxlbmFtZShleGVjdXRlUGF0aCkpO1xyXG4gICAgY29uc3QgY29uZmlnRnJvbVdvcmtEaXIgPSBhd2FpdCByZWFkQ29uZmlnUkMoZ2V0UkNGaWxlbmFtZSh3b3JrRGlyKSk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9uID0gY29uY3JldGVDb25maWcoXHJcbiAgICAgIG1lcmdpbmcoXHJcbiAgICAgICAgbWVyZ2luZyhcclxuICAgICAgICAgIFRFSS5pc1JpZ2h0KGNvbmZpZ0Zyb21FeGVjdXRlUGF0aClcclxuICAgICAgICAgICAgPyBjb25maWdGcm9tRXhlY3V0ZVBhdGgucmlnaHRcclxuICAgICAgICAgICAgOiBnZXREZWFmdWx0T3B0aW9ucygpLFxyXG4gICAgICAgICAgVEVJLmlzUmlnaHQoY29uZmlnRnJvbVdvcmtEaXIpID8gY29uZmlnRnJvbVdvcmtEaXIucmlnaHQgOiBnZXREZWFmdWx0T3B0aW9ucygpLFxyXG4gICAgICAgICksXHJcbiAgICAgICAgcGFzc2VkLFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuXHJcbiAgICBsb2coJ3JlYWRlZCBvcHRpb246ICcsIG9wdGlvbik7XHJcblxyXG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IENUSUxvZ2dlcihvcHRpb24udmVyYm9zZSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IGdldERlYWZ1bHRPcHRpb25zKCk7XHJcbiAgICAgIGNvbnN0IHN0cmluZ2lmaWVkID0ganNvbjUuc3RyaW5naWZ5KGRlZmF1bHRPcHRpb24sIG51bGwsIDIpO1xyXG5cclxuICAgICAgY29uc3QgaGVhZENvbnRlbnQgPSAoKCkgPT4ge1xyXG4gICAgICAgIGlmIChvcHRpb24udXNlVGltZXN0YW1wKSB7XHJcbiAgICAgICAgICByZXR1cm4gYC8vIGNyZWF0ZWQgZnJvbSAke29wdGlvbi5xdW90ZX1jcmVhdGUtdHMtaW5kZXgke1xyXG4gICAgICAgICAgICBvcHRpb24ucXVvdGVcclxuICAgICAgICAgIH0gJHtkYXlqcygpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYC8vIGNyZWF0ZWQgZnJvbSAke29wdGlvbi5xdW90ZX1jcmVhdGUtdHMtaW5kZXgke29wdGlvbi5xdW90ZX1gO1xyXG4gICAgICB9KSgpO1xyXG5cclxuICAgICAgY29uc3QgYWRkTmV3bGluZSA9ICgoKSA9PiB7XHJcbiAgICAgICAgaWYgKG9wdGlvbi5hZGROZXdsaW5lKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ1xcbic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH0pKCk7XHJcblxyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgZnMud3JpdGVGaWxlKFxyXG4gICAgICAgICAgcGF0aC5qb2luKHdvcmtEaXIsICcuY3RpcmMnKSxcclxuICAgICAgICAgIGAke2hlYWRDb250ZW50fVxcblxcbiR7c3RyaW5naWZpZWR9JHthZGROZXdsaW5lfWAsXHJcbiAgICAgICAgICAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc05vdEVtcHR5KGVycikpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxvZ2dlci5mbG9nKGNoYWxrLmdyZWVuKGAuY3RpcmMgY3JlYXRlIHN1Y2NlZWRlZDogJHtvcHRpb24uZ2xvYk9wdGlvbnMuY3dkfWApKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChjYXRjaGVkKSB7XHJcbiAgICAgIGNvbnN0IGVyciA9IGNhdGNoZWQgaW5zdGFuY2VvZiBFcnJvciA/IGNhdGNoZWQgOiBuZXcgRXJyb3IoJ3Vua25vd24gZXJyb3IgcmFpc2VkJyk7XHJcblxyXG4gICAgICBsb2dnZXIuZXJyb3IoY2hhbGsucmVkKCdpbmRleFdyaXRlcjogJywgZXJyLm1lc3NhZ2UpKTtcclxuICAgICAgbG9nZ2VyLmVycm9yKGNoYWxrLnJlZCgnaW5kZXhXcml0ZXI6ICcsIGVyci5zdGFjaykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHdyaXRlKF9hcmdzOiB7XHJcbiAgICBkaXJlY3RvcmllczogQXJyYXk8c3RyaW5nPjtcclxuICAgIG9wdGlvbjogSUNyZWF0ZVRzSW5kZXhPcHRpb247XHJcbiAgICBsb2dnZXI6IENUSUxvZ2dlcjtcclxuICB9KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n")},592:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk = (0, tslib_1.__importStar)(__webpack_require__(22));\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst yargs_1 = (0, tslib_1.__importDefault)(__webpack_require__(760));\r\nconst CleanCommandModule_1 = __webpack_require__(674);\r\nconst CreateCommandModule_1 = __webpack_require__(211);\r\nconst EntrypointCommandModule_1 = __webpack_require__(283);\r\nconst InitCommandModule_1 = __webpack_require__(101);\r\nconst configure_1 = __webpack_require__(323);\r\nconst options_1 = __webpack_require__(64);\r\nconst version = '1.10.2';\r\nfunction setter(name, yargv) {\r\n    const option = options_1.options.get(name);\r\n    if (option !== undefined && option !== null) {\r\n        yargv.option(name, option);\r\n    }\r\n}\r\nconst argv = yargs_1.default\r\n    .command({\r\n    aliases: '$0 [cwds...]',\r\n    builder: (args) => {\r\n        setter('filefirst', args);\r\n        setter('addnewline', args);\r\n        setter('usesemicolon', args);\r\n        setter('includecwd', args);\r\n        setter('usetimestamp', args);\r\n        setter('excludes', args);\r\n        setter('fileexcludes', args);\r\n        setter('targetexts', args);\r\n        setter('verbose', args);\r\n        setter('quote', args);\r\n        setter('withoutcomment', args);\r\n        setter('withoutbackup', args);\r\n        setter('output', args);\r\n        const anyArgs = args;\r\n        return anyArgs;\r\n    },\r\n    command: 'create [cwds...]',\r\n    describe: 'create index.ts file in working directory',\r\n    handler: (args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\r\n        const workingDir = process.cwd();\r\n        if (!args.cwds) {\r\n            console.log(chalk.default.magenta('Enter working directory, '));\r\n            console.log(chalk.default.red('cti [working directory]'));\r\n            process.exit(1);\r\n        }\r\n        const targetDirs = Array.isArray(args.cwds) ? args.cwds : [args.cwds];\r\n        yield Promise.all(targetDirs\r\n            .filter((cwd) => fs.existsSync(cwd))\r\n            .map((cwd) => {\r\n            const createCommand = new CreateCommandModule_1.CreateCommandModule();\r\n            const optionsFromCli = (0, configure_1.createFromCli)(args, cwd);\r\n            return createCommand.do(workingDir, optionsFromCli);\r\n        }));\r\n    }),\r\n})\r\n    .command({\r\n    builder: (args) => {\r\n        setter('addnewline', args);\r\n        setter('usesemicolon', args);\r\n        setter('includecwd', args);\r\n        setter('usetimestamp', args);\r\n        setter('excludes', args);\r\n        setter('fileexcludes', args);\r\n        setter('targetexts', args);\r\n        setter('verbose', args);\r\n        setter('quote', args);\r\n        setter('withoutcomment', args);\r\n        setter('withoutbackup', args);\r\n        setter('output', args);\r\n        const anyArgs = args;\r\n        return anyArgs;\r\n    },\r\n    command: 'entrypoint [cwds...]',\r\n    describe: 'create entrypoint.ts file in working directory',\r\n    handler: (args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\r\n        const workingDir = process.cwd();\r\n        if (!args.cwds) {\r\n            console.log(chalk.default.magenta('Enter working directory, '));\r\n            console.log(chalk.default.red('cti [working directory]'));\r\n            process.exit(1);\r\n        }\r\n        const targetDirs = Array.isArray(args.cwds) ? args.cwds : [args.cwds];\r\n        yield Promise.all(targetDirs\r\n            .filter((cwd) => fs.existsSync(cwd))\r\n            .map((cwd) => {\r\n            const entrypointCommand = new EntrypointCommandModule_1.EntrypointCommandModule();\r\n            const optionsFromCli = (0, configure_1.createFromCli)(args, cwd, 'entrypoint.ts');\r\n            return entrypointCommand.do(workingDir, optionsFromCli);\r\n        }));\r\n    }),\r\n})\r\n    .command({\r\n    builder: (args) => {\r\n        setter('addnewline', args);\r\n        setter('usetimestamp', args);\r\n        setter('verbose', args);\r\n        const anyArgs = args;\r\n        return anyArgs;\r\n    },\r\n    command: 'init [cwds...]',\r\n    describe: 'create .ctirc file in working directory',\r\n    handler: (args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\r\n        const workingDir = process.cwd();\r\n        if (!args.cwds) {\r\n            console.log(chalk.default.magenta('Enter working directory, '));\r\n            console.log(chalk.default.red('cti [working directory]'));\r\n            process.exit(1);\r\n        }\r\n        const targetDirs = Array.isArray(args.cwds) ? args.cwds : [args.cwds];\r\n        yield Promise.all(targetDirs\r\n            .filter((cwd) => fs.existsSync(cwd))\r\n            .map((cwd) => {\r\n            const initCommandModule = new InitCommandModule_1.InitCommandModule();\r\n            const optionsFromCli = (0, configure_1.createFromCli)(args, cwd);\r\n            return initCommandModule.do(workingDir, optionsFromCli);\r\n        }));\r\n    }),\r\n})\r\n    .command({\r\n    builder: (args) => {\r\n        setter('verbose', args);\r\n        setter('output', args);\r\n        const anyArgs = args;\r\n        return anyArgs;\r\n    },\r\n    command: 'clean [cwds...]',\r\n    describe: 'clean index.ts or entrypoint.ts file in working directory',\r\n    handler: (args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\r\n        const workDir = process.cwd();\r\n        if (!args.cwds) {\r\n            console.log(chalk.default.magenta('Enter working directory, '));\r\n            console.log(chalk.default.red('cti [working directory]'));\r\n            process.exit(1);\r\n        }\r\n        const targetDirs = Array.isArray(args.cwds) ? args.cwds : [args.cwds];\r\n        yield Promise.all(targetDirs\r\n            .filter((cwd) => fs.existsSync(cwd))\r\n            .map((cwd) => {\r\n            const cleanCommand = new CleanCommandModule_1.CleanCommandModule();\r\n            const optionsFromCli = (0, configure_1.createFromCli)(args, cwd);\r\n            return cleanCommand.do(workDir, optionsFromCli);\r\n        }));\r\n    }),\r\n})\r\n    .version(version, 'version', 'display version information')\r\n    .help().argv;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///592\n")},902:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\n__webpack_require__(592);\r\n__webpack_require__(534);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEseUJBQWU7QUFDZix5QkFBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtdHMtaW5kZXgvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vY3RpJztcclxuaW1wb3J0ICcuL1R5cGVTY3JpdEluZGV4V3JpdGVyJztcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///902\n')},323:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.concreteConfig = exports.readConfigRC = exports.cleansing = exports.cleanGlobOptions = exports.mergingGlobOptions = exports.merging = exports.createFromCli = exports.getDeafultOptions = exports.getRCFilename = exports.CTIRC_FILENAME = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst debug_1 = (0, tslib_1.__importDefault)(__webpack_require__(974));\r\nconst deepmerge_1 = (0, tslib_1.__importDefault)(__webpack_require__(330));\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst json5_1 = (0, tslib_1.__importDefault)(__webpack_require__(959));\r\nconst TEI = (0, tslib_1.__importStar)(__webpack_require__(431));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst util = (0, tslib_1.__importStar)(__webpack_require__(837));\r\nconst readFile = util.promisify(fs.readFile);\r\nconst exists = util.promisify(fs.exists);\r\nconst log = (0, debug_1.default)('cti:create-test');\r\nexports.CTIRC_FILENAME = '.ctirc';\r\nconst defaultOptions = {\r\n    addNewline: true,\r\n    excludes: ['@types', 'typings', '__test__', '__tests__', 'node_modules'],\r\n    fileExcludePatterns: [],\r\n    fileFirst: false,\r\n    globOptions: {\r\n        cwd: process.cwd(),\r\n        dot: true,\r\n        ignore: ['@types/**', 'typings/**', '__test__/**', '__tests__/**', 'node_modules/**'],\r\n        nonull: true,\r\n    },\r\n    includeCWD: true,\r\n    output: 'index.ts',\r\n    quote: \"'\",\r\n    targetExts: ['ts', 'tsx'],\r\n    useSemicolon: true,\r\n    useTimestamp: false,\r\n    verbose: false,\r\n    withoutBackupFile: false,\r\n    withoutComment: false,\r\n};\r\nfunction getRCFilename(configPath) {\r\n    log('Test Path: ', path.join(path.resolve(configPath), exports.CTIRC_FILENAME));\r\n    return path.join(path.resolve(configPath), exports.CTIRC_FILENAME);\r\n}\r\nexports.getRCFilename = getRCFilename;\r\nfunction getDeafultOptions() {\r\n    return Object.assign(Object.assign({}, defaultOptions), { globOptions: Object.assign({}, defaultOptions.globOptions) });\r\n}\r\nexports.getDeafultOptions = getDeafultOptions;\r\nfunction createFromCli(args, cwd, output) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\r\n    return {\r\n        addNewline: (_a = args.addnewline) !== null && _a !== void 0 ? _a : undefined,\r\n        excludes: (_b = args.excludes) !== null && _b !== void 0 ? _b : undefined,\r\n        fileExcludePatterns: (_c = args.fileexcludes) !== null && _c !== void 0 ? _c : undefined,\r\n        fileFirst: (_d = args.filefirst) !== null && _d !== void 0 ? _d : undefined,\r\n        globOptions: {\r\n            cwd,\r\n        },\r\n        includeCWD: (_e = args.includecwd) !== null && _e !== void 0 ? _e : undefined,\r\n        output: (_g = (_f = args.output) !== null && _f !== void 0 ? _f : output) !== null && _g !== void 0 ? _g : undefined,\r\n        quote: (_h = args.quote) !== null && _h !== void 0 ? _h : undefined,\r\n        targetExts: (_j = args.targetexts) !== null && _j !== void 0 ? _j : undefined,\r\n        useSemicolon: (_k = args.usesemicolon) !== null && _k !== void 0 ? _k : undefined,\r\n        useTimestamp: (_l = args.usetimestamp) !== null && _l !== void 0 ? _l : undefined,\r\n        verbose: (_m = args.verbose) !== null && _m !== void 0 ? _m : undefined,\r\n        withoutBackupFile: (_o = args.withoutbackup) !== null && _o !== void 0 ? _o : undefined,\r\n        withoutComment: (_p = args.withoutcomment) !== null && _p !== void 0 ? _p : undefined,\r\n    };\r\n}\r\nexports.createFromCli = createFromCli;\r\nfunction merging(src, dst) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;\r\n    const srcGlobOptions = (_a = cleanGlobOptions(src.globOptions)) !== null && _a !== void 0 ? _a : {};\r\n    const dstGlobOptions = (_b = cleanGlobOptions(dst.globOptions)) !== null && _b !== void 0 ? _b : {};\r\n    const full = {\r\n        addNewline: (_d = (_c = dst.addNewline) !== null && _c !== void 0 ? _c : src.addNewline) !== null && _d !== void 0 ? _d : undefined,\r\n        excludes: (_f = (_e = dst.excludes) !== null && _e !== void 0 ? _e : src.excludes) !== null && _f !== void 0 ? _f : undefined,\r\n        fileExcludePatterns: (_h = (_g = dst.fileExcludePatterns) !== null && _g !== void 0 ? _g : src.fileExcludePatterns) !== null && _h !== void 0 ? _h : undefined,\r\n        fileFirst: (_k = (_j = dst.fileFirst) !== null && _j !== void 0 ? _j : src.fileFirst) !== null && _k !== void 0 ? _k : undefined,\r\n        globOptions: mergingGlobOptions(srcGlobOptions, dstGlobOptions),\r\n        includeCWD: (_m = (_l = dst.includeCWD) !== null && _l !== void 0 ? _l : src.includeCWD) !== null && _m !== void 0 ? _m : undefined,\r\n        output: (_p = (_o = dst.output) !== null && _o !== void 0 ? _o : src.output) !== null && _p !== void 0 ? _p : undefined,\r\n        quote: (_r = (_q = dst.quote) !== null && _q !== void 0 ? _q : src.quote) !== null && _r !== void 0 ? _r : undefined,\r\n        targetExts: (_t = (_s = dst.targetExts) !== null && _s !== void 0 ? _s : src.targetExts) !== null && _t !== void 0 ? _t : undefined,\r\n        useSemicolon: (_v = (_u = dst.useSemicolon) !== null && _u !== void 0 ? _u : src.useSemicolon) !== null && _v !== void 0 ? _v : undefined,\r\n        useTimestamp: (_x = (_w = dst.useTimestamp) !== null && _w !== void 0 ? _w : src.useTimestamp) !== null && _x !== void 0 ? _x : undefined,\r\n        verbose: (_z = (_y = dst.verbose) !== null && _y !== void 0 ? _y : src.verbose) !== null && _z !== void 0 ? _z : undefined,\r\n        withoutBackupFile: (_1 = (_0 = dst.withoutBackupFile) !== null && _0 !== void 0 ? _0 : src.withoutBackupFile) !== null && _1 !== void 0 ? _1 : undefined,\r\n        withoutComment: (_3 = (_2 = dst.withoutComment) !== null && _2 !== void 0 ? _2 : src.withoutComment) !== null && _3 !== void 0 ? _3 : undefined,\r\n    };\r\n    const cleansed = cleansing(full);\r\n    return cleansed;\r\n}\r\nexports.merging = merging;\r\nfunction mergingGlobOptions(prevSrc, prevDst) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    const src = prevSrc !== null && prevSrc !== void 0 ? prevSrc : {};\r\n    const dst = prevDst !== null && prevDst !== void 0 ? prevDst : {};\r\n    return {\r\n        cwd: (_b = (_a = dst.cwd) !== null && _a !== void 0 ? _a : src.cwd) !== null && _b !== void 0 ? _b : defaultOptions.globOptions.cwd,\r\n        dot: (_d = (_c = dst.dot) !== null && _c !== void 0 ? _c : src.dot) !== null && _d !== void 0 ? _d : defaultOptions.globOptions.dot,\r\n        ignore: (_f = (_e = dst.ignore) !== null && _e !== void 0 ? _e : src.ignore) !== null && _f !== void 0 ? _f : defaultOptions.globOptions.ignore,\r\n        nonull: (_h = (_g = dst.nonull) !== null && _g !== void 0 ? _g : src.nonull) !== null && _h !== void 0 ? _h : defaultOptions.globOptions.nonull,\r\n    };\r\n}\r\nexports.mergingGlobOptions = mergingGlobOptions;\r\nfunction cleanGlobOptions(src) {\r\n    if (src === undefined || src === null) {\r\n        return undefined;\r\n    }\r\n    const globOptions = Object.keys(src).reduce((obj, key) => {\r\n        var _a;\r\n        const srcGlobOptions = src !== null && src !== void 0 ? src : {};\r\n        if (srcGlobOptions[key] !== undefined && srcGlobOptions[key] !== null) {\r\n            obj[key] =\r\n                key === 'cwd'\r\n                    ? path.resolve((_a = srcGlobOptions[key]) !== null && _a !== void 0 ? _a : '')\r\n                    : (obj[key] = srcGlobOptions[key]);\r\n            return obj;\r\n        }\r\n        return obj;\r\n    }, {});\r\n    if (Object.keys(globOptions).length <= 0) {\r\n        return undefined;\r\n    }\r\n    return globOptions;\r\n}\r\nexports.cleanGlobOptions = cleanGlobOptions;\r\nfunction cleansing(src) {\r\n    var _a;\r\n    const full = {\r\n        addNewline: src.addNewline,\r\n        excludes: src.excludes,\r\n        fileExcludePatterns: src.fileExcludePatterns,\r\n        fileFirst: src.fileFirst,\r\n        globOptions: cleanGlobOptions((_a = src.globOptions) !== null && _a !== void 0 ? _a : {}),\r\n        includeCWD: src.includeCWD,\r\n        output: src.output,\r\n        quote: src.quote,\r\n        targetExts: src.targetExts,\r\n        useSemicolon: src.useSemicolon,\r\n        useTimestamp: src.useTimestamp,\r\n        verbose: src.verbose,\r\n        withoutBackupFile: src.withoutBackupFile,\r\n        withoutComment: src.withoutComment,\r\n    };\r\n    const cleansed = Object.keys(full).reduce((obj, key) => {\r\n        if (src[key] !== undefined && src[key] !== null) {\r\n            obj[key] = src[key];\r\n        }\r\n        return obj;\r\n    }, {});\r\n    return cleansed;\r\n}\r\nexports.cleansing = cleansing;\r\nfunction readConfigRC(configPath) {\r\n    var _a, _b;\r\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n        try {\r\n            if (yield exists(configPath)) {\r\n                const readed = yield readFile(configPath);\r\n                const converted = readed.toString();\r\n                const config = json5_1.default.parse(converted);\r\n                const cleansed = cleansing(config);\r\n                if (((_a = cleansed.globOptions) === null || _a === void 0 ? void 0 : _a.cwd) !== undefined && ((_b = cleansed.globOptions) === null || _b === void 0 ? void 0 : _b.cwd) !== null) {\r\n                    cleansed.globOptions.cwd = path.resolve(cleansed.globOptions.cwd);\r\n                    const globOptions = (0, deepmerge_1.default)(cleansed.globOptions, defaultOptions.globOptions, {\r\n                        clone: true,\r\n                    });\r\n                    cleansed.globOptions = globOptions;\r\n                }\r\n                cleansed.__for_debug_from = configPath;\r\n                return TEI.right(cleansed);\r\n            }\r\n            return TEI.right({});\r\n        }\r\n        catch (catched) {\r\n            const err = catched instanceof Error ? catched : new Error('unknown error raised');\r\n            log(err.message);\r\n            log(err.stack);\r\n            return TEI.left(err);\r\n        }\r\n    });\r\n}\r\nexports.readConfigRC = readConfigRC;\r\nfunction concreteConfig(config) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\r\n    return {\r\n        addNewline: (_a = config.addNewline) !== null && _a !== void 0 ? _a : defaultOptions.addNewline,\r\n        excludes: (_b = config.excludes) !== null && _b !== void 0 ? _b : defaultOptions.excludes,\r\n        fileExcludePatterns: (_c = config.fileExcludePatterns) !== null && _c !== void 0 ? _c : defaultOptions.fileExcludePatterns,\r\n        fileFirst: (_d = config.fileFirst) !== null && _d !== void 0 ? _d : defaultOptions.fileFirst,\r\n        globOptions: (_e = cleanGlobOptions(config.globOptions)) !== null && _e !== void 0 ? _e : defaultOptions.globOptions,\r\n        includeCWD: (_f = config.includeCWD) !== null && _f !== void 0 ? _f : defaultOptions.includeCWD,\r\n        output: (_g = config.output) !== null && _g !== void 0 ? _g : defaultOptions.output,\r\n        quote: (_h = config.quote) !== null && _h !== void 0 ? _h : defaultOptions.quote,\r\n        targetExts: (_j = config.targetExts) !== null && _j !== void 0 ? _j : defaultOptions.targetExts,\r\n        useSemicolon: (_k = config.useSemicolon) !== null && _k !== void 0 ? _k : defaultOptions.useSemicolon,\r\n        useTimestamp: (_l = config.useTimestamp) !== null && _l !== void 0 ? _l : defaultOptions.useTimestamp,\r\n        verbose: (_m = config.verbose) !== null && _m !== void 0 ? _m : defaultOptions.verbose,\r\n        withoutBackupFile: (_o = config.withoutBackupFile) !== null && _o !== void 0 ? _o : defaultOptions.withoutBackupFile,\r\n        withoutComment: (_p = config.withoutComment) !== null && _p !== void 0 ? _p : defaultOptions.withoutComment,\r\n    };\r\n}\r\nexports.concreteConfig = concreteConfig;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///323\n")},64:(__unused_webpack_module,exports)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.options = void 0;\r\nexports.options = new Map([\r\n    [\r\n        'filefirst',\r\n        {\r\n            alias: 'f',\r\n            describe: 'export list create filefirst, no option false, option true',\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'addnewline',\r\n        {\r\n            alias: 'n',\r\n            describe: 'deside add newline file ending. no option true, option false',\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'usesemicolon',\r\n        {\r\n            alias: 's',\r\n            describe: 'deside use semicolon line ending. no option true, option false',\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'includecwd',\r\n        {\r\n            alias: 'c',\r\n            describe: 'deside include cwd directory in task. no option true, option false',\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'usetimestamp',\r\n        {\r\n            alias: 't',\r\n            describe: `deside use timestamp(YYYY-MM-DD HH:mm) top line comment. \\nno option false, option true`,\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'excludes',\r\n        {\r\n            alias: 'e',\r\n            array: true,\r\n            describe: `pass exclude directory. default exclude directory is ['@types', 'typings', '__test__', '__tests__']`,\r\n            type: 'string',\r\n        },\r\n    ],\r\n    [\r\n        'fileexcludes',\r\n        {\r\n            alias: 'i',\r\n            array: true,\r\n            describe: 'pass exclude pattern of filename. default exclude directory is \"[]\"',\r\n            type: 'string',\r\n        },\r\n    ],\r\n    [\r\n        'targetexts',\r\n        {\r\n            alias: 'x',\r\n            array: true,\r\n            describe: `pass include extname. default extname is [\"ts\", \"tsx\"]. extname \\npass without dot charactor.`,\r\n            type: 'string',\r\n        },\r\n    ],\r\n    [\r\n        'withoutcomment',\r\n        {\r\n            alias: 'w',\r\n            describe: 'remove comment from created file',\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'withoutbackup',\r\n        {\r\n            alias: 'b',\r\n            describe: \"Don't create backupfile if already exists target file\",\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'verbose',\r\n        {\r\n            alias: 'v',\r\n            describe: 'verbose logging message. to option false, option true',\r\n            type: 'boolean',\r\n        },\r\n    ],\r\n    [\r\n        'quote',\r\n        {\r\n            alias: 'q',\r\n            describe: \"deside quote character. default quote character is '\",\r\n            type: 'string',\r\n        },\r\n    ],\r\n    [\r\n        'output',\r\n        {\r\n            alias: 'o',\r\n            describe: 'set output filename. default index.ts or entrypoint.ts',\r\n            type: 'string',\r\n        },\r\n    ],\r\n]);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJtYXBwaW5ncyI6Ijs7O0FBS2EsZUFBTyxHQUFHLElBQUksR0FBRyxDQUErQjtJQUMzRDtRQUNFLFdBQVc7UUFDWDtZQUNFLEtBQUssRUFBRSxHQUFHO1lBQ1YsUUFBUSxFQUFFLDREQUE0RDtZQUN0RSxJQUFJLEVBQUUsU0FBUztTQUNoQjtLQUNGO0lBQ0Q7UUFDRSxZQUFZO1FBQ1o7WUFDRSxLQUFLLEVBQUUsR0FBRztZQUNWLFFBQVEsRUFBRSw4REFBOEQ7WUFDeEUsSUFBSSxFQUFFLFNBQVM7U0FDaEI7S0FDRjtJQUNEO1FBQ0UsY0FBYztRQUNkO1lBQ0UsS0FBSyxFQUFFLEdBQUc7WUFDVixRQUFRLEVBQUUsZ0VBQWdFO1lBQzFFLElBQUksRUFBRSxTQUFTO1NBQ2hCO0tBQ0Y7SUFDRDtRQUNFLFlBQVk7UUFDWjtZQUNFLEtBQUssRUFBRSxHQUFHO1lBQ1YsUUFBUSxFQUFFLG9FQUFvRTtZQUM5RSxJQUFJLEVBQUUsU0FBUztTQUNoQjtLQUNGO0lBQ0Q7UUFDRSxjQUFjO1FBQ2Q7WUFDRSxLQUFLLEVBQUUsR0FBRztZQUVWLFFBQVEsRUFBRSx5RkFBeUY7WUFDbkcsSUFBSSxFQUFFLFNBQVM7U0FDaEI7S0FDRjtJQUNEO1FBQ0UsVUFBVTtRQUNWO1lBQ0UsS0FBSyxFQUFFLEdBQUc7WUFDVixLQUFLLEVBQUUsSUFBSTtZQUVYLFFBQVEsRUFBRSxxR0FBcUc7WUFDL0csSUFBSSxFQUFFLFFBQVE7U0FDZjtLQUNGO0lBQ0Q7UUFDRSxjQUFjO1FBQ2Q7WUFDRSxLQUFLLEVBQUUsR0FBRztZQUNWLEtBQUssRUFBRSxJQUFJO1lBQ1gsUUFBUSxFQUFFLHFFQUFxRTtZQUMvRSxJQUFJLEVBQUUsUUFBUTtTQUNmO0tBQ0Y7SUFDRDtRQUNFLFlBQVk7UUFDWjtZQUNFLEtBQUssRUFBRSxHQUFHO1lBQ1YsS0FBSyxFQUFFLElBQUk7WUFFWCxRQUFRLEVBQUUsK0ZBQStGO1lBQ3pHLElBQUksRUFBRSxRQUFRO1NBQ2Y7S0FDRjtJQUNEO1FBQ0UsZ0JBQWdCO1FBQ2hCO1lBQ0UsS0FBSyxFQUFFLEdBQUc7WUFDVixRQUFRLEVBQUUsa0NBQWtDO1lBQzVDLElBQUksRUFBRSxTQUFTO1NBQ2hCO0tBQ0Y7SUFDRDtRQUNFLGVBQWU7UUFDZjtZQUNFLEtBQUssRUFBRSxHQUFHO1lBQ1YsUUFBUSxFQUFFLHVEQUF1RDtZQUNqRSxJQUFJLEVBQUUsU0FBUztTQUNoQjtLQUNGO0lBQ0Q7UUFDRSxTQUFTO1FBQ1Q7WUFDRSxLQUFLLEVBQUUsR0FBRztZQUNWLFFBQVEsRUFBRSx1REFBdUQ7WUFDakUsSUFBSSxFQUFFLFNBQVM7U0FDaEI7S0FDRjtJQUNEO1FBQ0UsT0FBTztRQUNQO1lBQ0UsS0FBSyxFQUFFLEdBQUc7WUFDVixRQUFRLEVBQUUsc0RBQXNEO1lBQ2hFLElBQUksRUFBRSxRQUFRO1NBQ2Y7S0FDRjtJQUNEO1FBQ0UsUUFBUTtRQUNSO1lBQ0UsS0FBSyxFQUFFLEdBQUc7WUFDVixRQUFRLEVBQUUsd0RBQXdEO1lBQ2xFLElBQUksRUFBRSxRQUFRO1NBQ2Y7S0FDRjtDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NyZWF0ZS10cy1pbmRleC8uL3NyYy9vcHRpb25zL29wdGlvbnMudHM/MjhiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAneWFyZ3MnO1xyXG5pbXBvcnQgeyBJQ3JlYXRlVHNJbmRleENsaU9wdGlvbiB9IGZyb20gJy4vSUNyZWF0ZVRzSW5kZXhDbGlPcHRpb24nO1xyXG5cclxudHlwZSBUS0VZX09GX0NMSV9PUFRJT05TID0ga2V5b2YgSUNyZWF0ZVRzSW5kZXhDbGlPcHRpb247XHJcblxyXG5leHBvcnQgY29uc3Qgb3B0aW9ucyA9IG5ldyBNYXA8VEtFWV9PRl9DTElfT1BUSU9OUywgT3B0aW9ucz4oW1xyXG4gIFtcclxuICAgICdmaWxlZmlyc3QnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ2YnLFxyXG4gICAgICBkZXNjcmliZTogJ2V4cG9ydCBsaXN0IGNyZWF0ZSBmaWxlZmlyc3QsIG5vIG9wdGlvbiBmYWxzZSwgb3B0aW9uIHRydWUnLFxyXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICB9LFxyXG4gIF0sXHJcbiAgW1xyXG4gICAgJ2FkZG5ld2xpbmUnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ24nLFxyXG4gICAgICBkZXNjcmliZTogJ2Rlc2lkZSBhZGQgbmV3bGluZSBmaWxlIGVuZGluZy4gbm8gb3B0aW9uIHRydWUsIG9wdGlvbiBmYWxzZScsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICAndXNlc2VtaWNvbG9uJyxcclxuICAgIHtcclxuICAgICAgYWxpYXM6ICdzJyxcclxuICAgICAgZGVzY3JpYmU6ICdkZXNpZGUgdXNlIHNlbWljb2xvbiBsaW5lIGVuZGluZy4gbm8gb3B0aW9uIHRydWUsIG9wdGlvbiBmYWxzZScsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICAnaW5jbHVkZWN3ZCcsXHJcbiAgICB7XHJcbiAgICAgIGFsaWFzOiAnYycsXHJcbiAgICAgIGRlc2NyaWJlOiAnZGVzaWRlIGluY2x1ZGUgY3dkIGRpcmVjdG9yeSBpbiB0YXNrLiBubyBvcHRpb24gdHJ1ZSwgb3B0aW9uIGZhbHNlJyxcclxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIFtcclxuICAgICd1c2V0aW1lc3RhbXAnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ3QnLFxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgZGVzY3JpYmU6IGBkZXNpZGUgdXNlIHRpbWVzdGFtcChZWVlZLU1NLUREIEhIOm1tKSB0b3AgbGluZSBjb21tZW50LiBcXG5ubyBvcHRpb24gZmFsc2UsIG9wdGlvbiB0cnVlYCxcclxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIFtcclxuICAgICdleGNsdWRlcycsXHJcbiAgICB7XHJcbiAgICAgIGFsaWFzOiAnZScsXHJcbiAgICAgIGFycmF5OiB0cnVlLFxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgZGVzY3JpYmU6IGBwYXNzIGV4Y2x1ZGUgZGlyZWN0b3J5LiBkZWZhdWx0IGV4Y2x1ZGUgZGlyZWN0b3J5IGlzIFsnQHR5cGVzJywgJ3R5cGluZ3MnLCAnX190ZXN0X18nLCAnX190ZXN0c19fJ11gLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICAnZmlsZWV4Y2x1ZGVzJyxcclxuICAgIHtcclxuICAgICAgYWxpYXM6ICdpJyxcclxuICAgICAgYXJyYXk6IHRydWUsXHJcbiAgICAgIGRlc2NyaWJlOiAncGFzcyBleGNsdWRlIHBhdHRlcm4gb2YgZmlsZW5hbWUuIGRlZmF1bHQgZXhjbHVkZSBkaXJlY3RvcnkgaXMgXCJbXVwiJyxcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICB9LFxyXG4gIF0sXHJcbiAgW1xyXG4gICAgJ3RhcmdldGV4dHMnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ3gnLFxyXG4gICAgICBhcnJheTogdHJ1ZSxcclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgIGRlc2NyaWJlOiBgcGFzcyBpbmNsdWRlIGV4dG5hbWUuIGRlZmF1bHQgZXh0bmFtZSBpcyBbXCJ0c1wiLCBcInRzeFwiXS4gZXh0bmFtZSBcXG5wYXNzIHdpdGhvdXQgZG90IGNoYXJhY3Rvci5gLFxyXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICAnd2l0aG91dGNvbW1lbnQnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ3cnLFxyXG4gICAgICBkZXNjcmliZTogJ3JlbW92ZSBjb21tZW50IGZyb20gY3JlYXRlZCBmaWxlJyxcclxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIFtcclxuICAgICd3aXRob3V0YmFja3VwJyxcclxuICAgIHtcclxuICAgICAgYWxpYXM6ICdiJyxcclxuICAgICAgZGVzY3JpYmU6IFwiRG9uJ3QgY3JlYXRlIGJhY2t1cGZpbGUgaWYgYWxyZWFkeSBleGlzdHMgdGFyZ2V0IGZpbGVcIixcclxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIFtcclxuICAgICd2ZXJib3NlJyxcclxuICAgIHtcclxuICAgICAgYWxpYXM6ICd2JyxcclxuICAgICAgZGVzY3JpYmU6ICd2ZXJib3NlIGxvZ2dpbmcgbWVzc2FnZS4gdG8gb3B0aW9uIGZhbHNlLCBvcHRpb24gdHJ1ZScsXHJcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICAncXVvdGUnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ3EnLFxyXG4gICAgICBkZXNjcmliZTogXCJkZXNpZGUgcXVvdGUgY2hhcmFjdGVyLiBkZWZhdWx0IHF1b3RlIGNoYXJhY3RlciBpcyAnXCIsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIFtcclxuICAgICdvdXRwdXQnLFxyXG4gICAge1xyXG4gICAgICBhbGlhczogJ28nLFxyXG4gICAgICBkZXNjcmliZTogJ3NldCBvdXRwdXQgZmlsZW5hbWUuIGRlZmF1bHQgaW5kZXgudHMgb3IgZW50cnlwb2ludC50cycsXHJcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgfSxcclxuICBdLFxyXG5dKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///64\n")},38:(__unused_webpack_module,exports)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.CTILogger = void 0;\r\nclass CTILogger {\r\n    constructor(verbose) {\r\n        if (verbose) {\r\n            this.log = console.log;\r\n            this.error = console.error;\r\n        }\r\n        else {\r\n            this.log = () => {\r\n                return;\r\n            };\r\n            this.error = console.error;\r\n        }\r\n        this.flog = console.log;\r\n        this.ferror = console.error;\r\n    }\r\n}\r\nexports.CTILogger = CTILogger;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJtYXBwaW5ncyI6Ijs7O0FBSUEsTUFBYSxTQUFTO0lBTXBCLFlBQVksT0FBZ0I7UUFDMUIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1NBQzVCO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtnQkFDZCxPQUFPO1lBQ1QsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFwQkQsOEJBb0JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JlYXRlLXRzLWluZGV4Ly4vc3JjL3Rvb2xzL0NUSUxvZ2dlci50cz9lOWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlIG5vLWNvbnNvbGVcclxuXHJcbnR5cGUgbG9nRnVuYyA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogQXJyYXk8YW55PikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBDVElMb2dnZXIge1xyXG4gIHB1YmxpYyByZWFkb25seSBsb2c6IGxvZ0Z1bmM7XHJcbiAgcHVibGljIHJlYWRvbmx5IGVycm9yOiBsb2dGdW5jO1xyXG4gIHB1YmxpYyByZWFkb25seSBmbG9nOiBsb2dGdW5jO1xyXG4gIHB1YmxpYyByZWFkb25seSBmZXJyb3I6IGxvZ0Z1bmM7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZlcmJvc2U6IGJvb2xlYW4pIHtcclxuICAgIGlmICh2ZXJib3NlKSB7XHJcbiAgICAgIHRoaXMubG9nID0gY29uc29sZS5sb2c7XHJcbiAgICAgIHRoaXMuZXJyb3IgPSBjb25zb2xlLmVycm9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5sb2cgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmVycm9yID0gY29uc29sZS5lcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZsb2cgPSBjb25zb2xlLmxvZztcclxuICAgIHRoaXMuZmVycm9yID0gY29uc29sZS5lcnJvcjtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38\n')},571:(__unused_webpack_module,exports)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getQuote = exports.parseBool = exports.isEmpty = exports.isNotEmpty = exports.isFalsy = exports.addNewline = exports.addDot = void 0;\r\nfunction addDot(ext) {\r\n    if (ext.startsWith('.'))\r\n        return ext;\r\n    return `.${ext}`;\r\n}\r\nexports.addDot = addDot;\r\nfunction addNewline(option, data) {\r\n    if (option.addNewline)\r\n        return `${data}\\n`;\r\n    return data;\r\n}\r\nexports.addNewline = addNewline;\r\nfunction isFalsy(value) {\r\n    return !value;\r\n}\r\nexports.isFalsy = isFalsy;\r\nfunction isNotEmpty(value) {\r\n    return value !== undefined && value !== null;\r\n}\r\nexports.isNotEmpty = isNotEmpty;\r\nfunction isEmpty(value) {\r\n    return !isNotEmpty(value);\r\n}\r\nexports.isEmpty = isEmpty;\r\nfunction parseBool(value) {\r\n    if (value === undefined) {\r\n        return false;\r\n    }\r\n    if (value === null) {\r\n        return false;\r\n    }\r\n    if (typeof value === 'number') {\r\n        return true;\r\n    }\r\n    if (typeof value === 'string' && value === 'false') {\r\n        return false;\r\n    }\r\n    if (typeof value === 'string' && value === 'true') {\r\n        return true;\r\n    }\r\n    return Boolean(value);\r\n}\r\nexports.parseBool = parseBool;\r\nfunction getQuote(value) {\r\n    if (value === 'd' || value === '\"') {\r\n        return '\"';\r\n    }\r\n    return \"'\";\r\n}\r\nexports.getQuote = getQuote;\r\nexports[\"default\"] = {\r\n    addDot,\r\n    addNewline,\r\n    getQuote,\r\n    isEmpty,\r\n    isNotEmpty,\r\n    parseBool,\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcxLmpzIiwibWFwcGluZ3MiOiI7OztBQUVBLFNBQWdCLE1BQU0sQ0FBQyxHQUFXO0lBQ2hDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUNwQyxPQUFPLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbkIsQ0FBQztBQUhELHdCQUdDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE1BQTRCLEVBQUUsSUFBWTtJQUNuRSxJQUFJLE1BQU0sQ0FBQyxVQUFVO1FBQUUsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDO0lBQzFDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUhELGdDQUdDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLEtBQWM7SUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNoQixDQUFDO0FBRkQsMEJBRUM7QUFFRCxTQUFnQixVQUFVLENBQUksS0FBNEI7SUFDeEQsT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDL0MsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFJLEtBQTRCO0lBQ3JELE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUZELDBCQUVDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEtBQWtDO0lBQzFELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFHRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQztLQUNiO0lBR0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLE9BQU8sRUFBRTtRQUNsRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtRQUNqRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQXhCRCw4QkF3QkM7QUFFRCxTQUFnQixRQUFRLENBQUMsS0FBYTtJQUNwQyxJQUFJLEtBQUssS0FBSyxHQUFHLElBQUksS0FBSyxLQUFLLEdBQUcsRUFBRTtRQUNsQyxPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTkQsNEJBTUM7QUFFRCxxQkFBZTtJQUNiLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztDQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtdHMtaW5kZXgvLi9zcmMvdG9vbHMvQ1RJVXRpbGl0eS50cz8wMWM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDcmVhdGVUc0luZGV4T3B0aW9uIH0gZnJvbSAnLi4vb3B0aW9ucy9JQ3JlYXRlVHNJbmRleE9wdGlvbic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkRG90KGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICBpZiAoZXh0LnN0YXJ0c1dpdGgoJy4nKSkgcmV0dXJuIGV4dDtcclxuICByZXR1cm4gYC4ke2V4dH1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkTmV3bGluZShvcHRpb246IElDcmVhdGVUc0luZGV4T3B0aW9uLCBkYXRhOiBzdHJpbmcpIHtcclxuICBpZiAob3B0aW9uLmFkZE5ld2xpbmUpIHJldHVybiBgJHtkYXRhfVxcbmA7XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZhbHN5KHZhbHVlOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuICF2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTm90RW1wdHk8VD4odmFsdWU/OiBUIHwgdW5kZWZpbmVkIHwgbnVsbCk6IHZhbHVlIGlzIFQge1xyXG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eTxUPih2YWx1ZT86IFQgfCB1bmRlZmluZWQgfCBudWxsKTogdmFsdWUgaXMgVCB7XHJcbiAgcmV0dXJuICFpc05vdEVtcHR5KHZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQm9vbCh2YWx1ZT86IHVua25vd24gfCB1bmRlZmluZWQgfCBudWxsKTogYm9vbGVhbiB7XHJcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gcHJldmVudCAwIHRvIGZhbHNlXHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gbGl0ZXJhbCAnZmFsc2UnIHRvIGZhbHNlIGJvb2xlYW4gdHlwZVxyXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlID09PSAnZmFsc2UnKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBCb29sZWFuKHZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1b3RlKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGlmICh2YWx1ZSA9PT0gJ2QnIHx8IHZhbHVlID09PSAnXCInKSB7XHJcbiAgICByZXR1cm4gJ1wiJztcclxuICB9XHJcblxyXG4gIHJldHVybiBcIidcIjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGFkZERvdCxcclxuICBhZGROZXdsaW5lLFxyXG4gIGdldFF1b3RlLFxyXG4gIGlzRW1wdHksXHJcbiAgaXNOb3RFbXB0eSxcclxuICBwYXJzZUJvb2wsXHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///571\n")},240:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.exists = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst fs = (0, tslib_1.__importStar)(__webpack_require__(147));\r\nconst my_easy_fp_1 = __webpack_require__(352);\r\nfunction exists(filepath) {\r\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\r\n        try {\r\n            const accessed = yield fs.promises.access(filepath);\r\n            return (0, my_easy_fp_1.isEmpty)(accessed);\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n    });\r\n}\r\nexports.exists = exists;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwrREFBeUI7QUFDekIsOENBQXFDO0FBTXJDLFNBQXNCLE1BQU0sQ0FBQyxRQUFnQjs7UUFDM0MsSUFBSTtZQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEQsT0FBTyx3QkFBTyxFQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzFCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztDQUFBO0FBUEQsd0JBT0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtdHMtaW5kZXgvLi9zcmMvdG9vbHMvZXhpc3RzLnRzP2M4N2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnbXktZWFzeS1mcCc7XHJcblxyXG4vKipcclxuICogY2hlY2sgZmlsZSBleGlzdGluZywgaWYgZmlsZSBleGlzdHMgcmV0dXJuIHRydWUsIGRvbid0IGV4aXN0cyByZXR1cm4gZmFsc2VcclxuICogQHBhcmFtIGZpbGVwYXRoIGZpbGVuYW1lIHdpdGggcGF0aFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4aXN0cyhmaWxlcGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGFjY2Vzc2VkID0gYXdhaXQgZnMucHJvbWlzZXMuYWNjZXNzKGZpbGVwYXRoKTtcclxuICAgIHJldHVybiBpc0VtcHR5KGFjY2Vzc2VkKTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///240\n')},418:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getExportStatementCreator = void 0;\r\nconst tslib_1 = __webpack_require__(655);\r\nconst chalk_1 = (0, tslib_1.__importDefault)(__webpack_require__(22));\r\nconst path = (0, tslib_1.__importStar)(__webpack_require__(17));\r\nconst CTIUtility_1 = __webpack_require__(571);\r\nfunction getExportStatementCreator(option, logger) {\r\n    const targetExtWithDot = option.targetExts.map((ext) => (0, CTIUtility_1.addDot)(ext));\r\n    const pathReplacer = path.sep !== '/'\r\n        ? (exportPath) => exportPath.replace(new RegExp(path.sep.replace('\\\\', '\\\\\\\\'), 'g'), '/')\r\n        : (exportPath) => exportPath;\r\n    if (option.useSemicolon) {\r\n        const getExportWithSemicolon = (target) => {\r\n            const matchedExt = targetExtWithDot.find((ext) => path.extname(target) === ext);\r\n            const targetWithoutExt = (0, CTIUtility_1.isNotEmpty)(matchedExt)\r\n                ? target.replace(matchedExt, '')\r\n                : target;\r\n            logger.log(chalk_1.default.green('entrypoint added from:'), target);\r\n            return `export * from ${option.quote}./${pathReplacer(targetWithoutExt)}${option.quote};`;\r\n        };\r\n        return getExportWithSemicolon;\r\n    }\r\n    const getExport = (target) => {\r\n        const matchedExt = targetExtWithDot.find((ext) => path.extname(target) === ext);\r\n        const targetWithoutExt = (0, CTIUtility_1.isNotEmpty)(matchedExt) ? target.replace(matchedExt, '') : target;\r\n        logger.log(chalk_1.default.green('entrypoint added from:'), target);\r\n        return `export * from ${option.quote}./${pathReplacer(targetWithoutExt)}${option.quote}`;\r\n    };\r\n    return getExport;\r\n}\r\nexports.getExportStatementCreator = getExportStatementCreator;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzRUFBMEI7QUFDMUIsZ0VBQTZCO0FBRzdCLDhDQUFrRDtBQUVsRCxTQUFnQix5QkFBeUIsQ0FBQyxNQUE0QixFQUFFLE1BQWlCO0lBQ3ZGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLHVCQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRSxNQUFNLFlBQVksR0FDaEIsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHO1FBQ2QsQ0FBQyxDQUFDLENBQUMsVUFBa0IsRUFBRSxFQUFFLENBQ3JCLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUM1RSxDQUFDLENBQUMsQ0FBQyxVQUFrQixFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFFekMsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ3ZCLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUNoRCxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDaEYsTUFBTSxnQkFBZ0IsR0FBRywyQkFBVSxFQUFDLFVBQVUsQ0FBQztnQkFDN0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztnQkFDaEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUVYLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBSyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRTFELE9BQU8saUJBQWlCLE1BQU0sQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLGdCQUFnQixDQUFDLEdBQ3JFLE1BQU0sQ0FBQyxLQUNULEdBQUcsQ0FBQztRQUNOLENBQUMsQ0FBQztRQUVGLE9BQU8sc0JBQXNCLENBQUM7S0FDL0I7SUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFO1FBQ25DLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoRixNQUFNLGdCQUFnQixHQUFHLDJCQUFVLEVBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFMUYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFMUQsT0FBTyxpQkFBaUIsTUFBTSxDQUFDLEtBQUssS0FBSyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0YsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQWxDRCw4REFrQ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtdHMtaW5kZXgvLi9zcmMvdG9vbHMvZXhwb3J0U3RhdGVtZW50LnRzPzdkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgSUNyZWF0ZVRzSW5kZXhPcHRpb24gfSBmcm9tICcuLi9vcHRpb25zL0lDcmVhdGVUc0luZGV4T3B0aW9uJztcclxuaW1wb3J0IHsgQ1RJTG9nZ2VyIH0gZnJvbSAnLi9DVElMb2dnZXInO1xyXG5pbXBvcnQgeyBhZGREb3QsIGlzTm90RW1wdHkgfSBmcm9tICcuL0NUSVV0aWxpdHknO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4cG9ydFN0YXRlbWVudENyZWF0b3Iob3B0aW9uOiBJQ3JlYXRlVHNJbmRleE9wdGlvbiwgbG9nZ2VyOiBDVElMb2dnZXIpIHtcclxuICBjb25zdCB0YXJnZXRFeHRXaXRoRG90ID0gb3B0aW9uLnRhcmdldEV4dHMubWFwKChleHQpID0+IGFkZERvdChleHQpKTtcclxuICBjb25zdCBwYXRoUmVwbGFjZXIgPVxyXG4gICAgcGF0aC5zZXAgIT09ICcvJ1xyXG4gICAgICA/IChleHBvcnRQYXRoOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICBleHBvcnRQYXRoLnJlcGxhY2UobmV3IFJlZ0V4cChwYXRoLnNlcC5yZXBsYWNlKCdcXFxcJywgJ1xcXFxcXFxcJyksICdnJyksICcvJylcclxuICAgICAgOiAoZXhwb3J0UGF0aDogc3RyaW5nKSA9PiBleHBvcnRQYXRoO1xyXG5cclxuICBpZiAob3B0aW9uLnVzZVNlbWljb2xvbikge1xyXG4gICAgY29uc3QgZ2V0RXhwb3J0V2l0aFNlbWljb2xvbiA9ICh0YXJnZXQ6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBtYXRjaGVkRXh0ID0gdGFyZ2V0RXh0V2l0aERvdC5maW5kKChleHQpID0+IHBhdGguZXh0bmFtZSh0YXJnZXQpID09PSBleHQpO1xyXG4gICAgICBjb25zdCB0YXJnZXRXaXRob3V0RXh0ID0gaXNOb3RFbXB0eShtYXRjaGVkRXh0KVxyXG4gICAgICAgID8gdGFyZ2V0LnJlcGxhY2UobWF0Y2hlZEV4dCwgJycpXHJcbiAgICAgICAgOiB0YXJnZXQ7XHJcblxyXG4gICAgICBsb2dnZXIubG9nKGNoYWxrLmdyZWVuKCdlbnRyeXBvaW50IGFkZGVkIGZyb206JyksIHRhcmdldCk7XHJcblxyXG4gICAgICByZXR1cm4gYGV4cG9ydCAqIGZyb20gJHtvcHRpb24ucXVvdGV9Li8ke3BhdGhSZXBsYWNlcih0YXJnZXRXaXRob3V0RXh0KX0ke1xyXG4gICAgICAgIG9wdGlvbi5xdW90ZVxyXG4gICAgICB9O2A7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBnZXRFeHBvcnRXaXRoU2VtaWNvbG9uO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0RXhwb3J0ID0gKHRhcmdldDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBtYXRjaGVkRXh0ID0gdGFyZ2V0RXh0V2l0aERvdC5maW5kKChleHQpID0+IHBhdGguZXh0bmFtZSh0YXJnZXQpID09PSBleHQpO1xyXG4gICAgY29uc3QgdGFyZ2V0V2l0aG91dEV4dCA9IGlzTm90RW1wdHkobWF0Y2hlZEV4dCkgPyB0YXJnZXQucmVwbGFjZShtYXRjaGVkRXh0LCAnJykgOiB0YXJnZXQ7XHJcblxyXG4gICAgbG9nZ2VyLmxvZyhjaGFsay5ncmVlbignZW50cnlwb2ludCBhZGRlZCBmcm9tOicpLCB0YXJnZXQpO1xyXG5cclxuICAgIHJldHVybiBgZXhwb3J0ICogZnJvbSAke29wdGlvbi5xdW90ZX0uLyR7cGF0aFJlcGxhY2VyKHRhcmdldFdpdGhvdXRFeHQpfSR7b3B0aW9uLnF1b3RlfWA7XHJcbiAgfTtcclxuICByZXR1cm4gZ2V0RXhwb3J0O1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///418\n")},655:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "__extends": () => (/* binding */ __extends),\n/* harmony export */   "__assign": () => (/* binding */ __assign),\n/* harmony export */   "__rest": () => (/* binding */ __rest),\n/* harmony export */   "__decorate": () => (/* binding */ __decorate),\n/* harmony export */   "__param": () => (/* binding */ __param),\n/* harmony export */   "__metadata": () => (/* binding */ __metadata),\n/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),\n/* harmony export */   "__generator": () => (/* binding */ __generator),\n/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),\n/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),\n/* harmony export */   "__values": () => (/* binding */ __values),\n/* harmony export */   "__read": () => (/* binding */ __read),\n/* harmony export */   "__spread": () => (/* binding */ __spread),\n/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),\n/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),\n/* harmony export */   "__await": () => (/* binding */ __await),\n/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),\n/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),\n/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),\n/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   "__importStar": () => (/* binding */ __importStar),\n/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),\n/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== "function" && b !== null)\r\n        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o["default"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\r\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === "m") throw new TypeError("Private method is not writable");\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\r\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///655\n')},22:Q=>{Q.exports=require("chalk")},635:Q=>{Q.exports=require("dayjs")},974:Q=>{Q.exports=require("debug")},330:Q=>{Q.exports=require("deepmerge")},431:Q=>{Q.exports=require("fp-ts/Either")},230:Q=>{Q.exports=require("glob")},959:Q=>{Q.exports=require("json5")},828:Q=>{Q.exports=require("minimatch")},352:Q=>{Q.exports=require("my-easy-fp")},760:Q=>{Q.exports=require("yargs")},147:Q=>{Q.exports=require("fs")},17:Q=>{Q.exports=require("path")},837:Q=>{Q.exports=require("util")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(902),__webpack_export_target__=exports;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();